grammar
e {{ tex \nonterm e }} :: tm_ ::= {{ com terms }}
  | x				::   :: var {{ com variable }}
  | v				::   :: refvar {{ com refinement var }}
  | n				::   :: int {{ com integer }}
  | if e1 then e2 else e3
					::   :: ite {{ com conditional }}
  | e1 binop e2		::   :: binop {{ com binary op }}
  | \ x : t . e		::   :: abs {{ com abstraction }}
  | e1 e2			::   :: app {{ com application }}

binop {{ tex \nonterm{binop} }} :: tm_ ::= {{ com binary ops }}
  | +				::   :: opplus
  | <				::   :: oplt
  | ==				::   :: opeq

r {{ tex \nonterm r }} :: tp_ ::= {{ com refinements }}
  | top				::   :: rtrue {{ com true refinement }}
  | e				::   :: rexpr {{ com atomic refinement }}
  | r1 /\ r2		::   :: rconj {{ com conjunction }}

B {{ tex \nonterm B }} :: tp_ ::= {{ com base types }}
  | Int				::   :: bInt
  | Bool			::	 :: bBool

t {{ tex \nonterm t }} :: tp_ ::= {{ com types }}
  | { v : B | r }	::   :: tybase {{ com refined base type }}
  | ( x : t_1 ) -> t_2	::   :: tyarr  {{ com arrow type }}
  | { e / x } t     :: M :: tsubst

G {{ tex \nonterm G }} :: env_ ::=
  | empty        ::   :: nil
  | G , x : t    ::   :: var
  | G , v : t    ::   :: refvar

defns Jtype :: '' ::=

defn G |- t :: :: type_wf :: TWF_ {{ com type well-formedness }} by

G , v : { v : B | top } |- e : { v : Bool | r }
----------------------------------------------- :: Base
G |- { v : B | e }

G |- t_1
G, x : t_1 |- t_2
--------------------- :: Arr
G |- (x : t_1) -> t_2


defn G |- e : t :: :: typing :: T_ {{ com term typing }} by

x : t in G
---------- :: Var
G |- x : t

G |- ( x : t1 ) -> t2
G |- e1 : ( x : t1 ) -> t2
G |- e2 : t1
-------------------------- :: App
G |- e1 e2 : {e2/x}t2

G , x : t_1 |- e : t_2
------------------------------------- :: Abs
G |- \x : t_1. e : ( x : t_1 ) -> t_2

G |- e1 : { v : Bool | r }
G |- e2 : t
G |- e3 : t
------------------------------------- :: If
G |- if e1 then e2 else e3 : t


grammar
metavar x {{ tex \gterm x }} ::= {{ com variables }}
metavar v {{ tex \gterm v }} ::= {{ com refinement variables }}
metavar n {{ tex \gterm n }} ::= {{ com integers }}

grammar
formula :: formula_ ::=
  | judgement    :: :: judgement
  | formula \\\\ :: :: lbh
  | x : t in G   :: :: xinenv
  | G |- t ok    :: :: tokay

terminals :: terminals_ ::=
  | top		:: :: top {{ tex \top }}
  | /\      :: :: and {{ tex \land }}
  | ->      :: :: arr {{ tex \rightarrow }}
  | in		:: :: in  {{ tex \in }}
  | |-		:: :: proves {{ tex \vdash }}
  | \       :: :: lambda {{ tex \lambda }}
