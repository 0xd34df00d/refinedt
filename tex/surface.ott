grammar
e {{ tex \nonterm e }} :: tm_ ::= {{ com terms }}
  | x				::   :: var {{ com variable }}
  | v				::   :: refvar {{ com refinement var }}
  | n				::   :: int {{ com integer }}
  | if e1 then e2 else e3
					::   :: ite {{ com conditional }}
  | \ x : t . e		::   :: abs {{ com abstraction }}
  | e1 e2			::   :: app {{ com application }}
  | top				::   :: true {{ com true }}
  | bot				::   :: false {{ com false }}

r {{ tex \nonterm r }} :: tp_ ::= {{ com refinements }}
  | e				::   :: rexpr {{ com atomic refinement }}
  | r1 /\ r2		::   :: rconj {{ com conjunction }}

B {{ tex \nonterm B }} :: tp_ ::= {{ com base types }}
  | Int				::   :: bInt
  | Bool			::	 :: bBool

t {{ tex \nonterm t }} :: tp_ ::= {{ com types }}
  | { v : B | r }		::   :: tybase {{ com refined base type }}
  | { v : t | r }		:: M :: tyref {{ com refined base type }}
  | ( x : t_1 ) -> t_2	::   :: tyarr  {{ com arrow type }}
  | { e / x } t			:: M :: tsubst

G {{ tex \nonterm G }} :: env_ ::=
  | empty			::   :: nil
  | G , x : t		::   :: var
  | G , v : t		::   :: refvar
  | G , L			::   :: logical

L {{ tex \nonterm L }} :: logic_pred_ ::= {{ com logical predicate }}
  | e1 = e2			::   :: termEq {{ com term equality }}
defns Jtype :: '' ::=

defn G |- t :: :: type_wf :: TWF_ {{ com type well-formedness }} by

-------------------- :: TrueRef
G |- { v : t | top }

G , v : { v' : t | top } |- e : { v : Bool | r }
----------------------------------------------- :: Base
G |- { v : t | e }

G |- { v : t | r1 }
G |- { v : t | r2 }
------------------------- :: Conj
G |- { v : t | r1 /\ r2 }

G |- t_1
G, x : t_1 |- t_2
--------------------- :: Arr
G |- (x : t_1) -> t_2


defn G |- e : t :: :: typing :: T_ {{ com term typing }} by

x : t in G
---------- :: Var
G |- x : t

--------------------------- :: BoolTop
G |- top : { v : Bool | top }

--------------------------- :: BoolBot
G |- bot : { v : Bool | top }

G |- ( x : t1 ) -> t2
G |- e1 : ( x : t1 ) -> t2
G |- e2 : t1
-------------------------- :: App
G |- e1 e2 : {e2/x}t2

G , x : t_1 |- e : t_2
------------------------------------- :: Abs
G |- \x : t_1. e : ( x : t_1 ) -> t_2

G |- e1 : { v : Bool | r }
G , e1 = top |- e2 : t
G , e1 = bot |- e3 : t
------------------------------------- :: If
G |- if e1 then e2 else e3 : t

G |- e : t
G |- t' <: t
------------ :: Sub
G |- e : t'


defn G |- t1 <: t2 :: :: subtyping :: ST_ {{ com subtyping }} by

%[|G|] => (âˆ€ v. r1 => r2)
%------------------------------------- :: Base
%G |- { v : B | r1 } <: { v : B | r2 }


G |- t1' <: t1
G , x : t1 |- t2 <: t2'
--------------------------------------- :: Arr
G |- (x : t1) -> t2 <: (x : t1') -> t2'


grammar
metavar x {{ tex \gterm x }} ::= {{ com variables }}
metavar v {{ tex \gterm v }} ::= {{ com refinement variables }}
metavar n {{ tex \gterm n }} ::= {{ com integers }}

grammar
formula :: formula_ ::=
  | judgement	:: :: judgement
  | x : t in G  :: :: xinenv
  | e = T		:: :: eTrue
  | e = F		:: :: eFalse

terminals :: terminals_ ::=
  | top		:: :: top {{ tex \top }}
  | bot		:: :: bot {{ tex \bot }}
  | /\      :: :: and {{ tex \land }}
  | ->      :: :: arr {{ tex \rightarrow }}
  | in		:: :: in  {{ tex \in }}
  | |-		:: :: proves {{ tex \vdash }}
  | \       :: :: lambda {{ tex \lambda }}
  | <:		:: :: subtype {{ tex \mathrel{<:} }}
