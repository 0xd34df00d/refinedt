grammar
ec {{ tex \nonterm{ec} }} :: tmCore_ ::= {{ com expressions }}
  | x					::   :: var {{ com variable }}
  | s					::   :: sort {{ com sort }}
  | Pi x : ec1 . ec2	::   :: piabs {{ com $\Pi$-type }}
  | \ x : ec1 . ec2		::   :: lamabs {{ com abstraction }}
  | ec1 ec2				::   :: app {{ com application }}
  | unitc				::   :: unit {{ com unit value }}
  | Unitc				::   :: Unit {{ com unit type }}
  | < </ li : eci // i /> > ::   :: variant {{ com ADT }}
  | < l = ec > as < </ li : eci // i /> >
						::   :: adt {{ com ADT construction }}
  | case ec of </ li = xi proof pi -> eci // i />
						::   :: case {{ com ADT case }}

  | [ x |-> ec1 ] ec2	:: M :: xsubst
  | [ p |-> ec1 ] ec2	:: M :: psubst
  | p					:: M :: proofterm
  | ec1 -> ec2			:: M :: nondep_arrow
  | ec1 equal ec2		:: M :: equality
  | < l = ec > as ec'   :: M :: adtcon_arb
  | vc					:: M :: value
  | ( ec )				:: M :: parens
  | eqrefl				:: M :: eq_introduction
  | tc					:: M :: type
  | BC					:: M :: base {{ tex \Basec }}
  | ( ec1 , ec2 )		:: M :: pair
  | ( v : ec1 ** ec2 )  :: M :: dvpair
  | ( x : ec1 ** ec2 )  :: M :: dxpair
  | ( _ : ec1 ** ec2 )  :: M :: dvpairIrrelevant
  | Pred				:: M :: predicate
  | v					:: M :: vvar
  | f					:: M :: fvar
  | \ f : ec1 . ec2		:: M :: lamfabs {{ com abstraction on functions }}
  | \ ec : ec1 . ec2	:: M :: lamvabs {{ com abstraction on v-vars }}
  | \ _ : ec1 . ec2		:: M :: lamirrabs {{ com abstraction irrelevant }}
  | seconddp			:: M :: map_second_dp {{ tex \secondDP }}
  | sigma				:: M :: oracle_sigma {{ tex \sigma }}
  | gamma				:: M :: subtyping_conversion
  | Pi ec : ec1 . ec2	:: M :: pivabs

s {{ tex \nonterm{s} }} :: s_ ::= {{ com sorts }}
  | sst				::   :: type {{ com types }}
  | ssq				::   :: kind {{ com kinds }}

vc {{ tex \nonterm{vc} }} :: vc_ ::= {{ com values }}
  | \ x : ec1 . ec2		::   :: abs {{ com abstraction value }}
  | unitc				::   :: top {{ com unit value }}
  | < l = vc > as < </ li : eci // i /> >
						::   :: adt {{ com ADT value }}

GC {{ tex \nonterm{GC} }} :: coreenv_ ::=
  | empty			::   :: nil
  | GC , x : ec		::   :: var
  | GC , p : ec		:: M :: proofvar

defns Jctype :: '' ::=

defn GC |- ec1 : ec2 :: :: coretyping :: CT_ {{ com typing }} by

------------------ :: Sort
empty |- sst : ssq

GC |- ec : s
--------------------- :: Var
GC , x : ec |- x : ec

GC |- ec1 : ec2
GC |- ec3 : s
------------------------- :: Weaken
GC , x : ec3 |- ec1 : ec2

GC |- ec1 : s1
GC , x : ec1 |- ec2 : s2
--------------------------- :: Form
GC |- Pi x : ec1 . ec2 : s2

GC |- ec1' : Pi x : ec1 . ec2
GC |- ec2' : ec1
----------------------------- :: App
GC |- ec1' ec2' : [ x |-> ec1 ] ec2

GC , x : ec1 |- ec : ec2
GC |- Pi x : ec1 . ec2 : s
----------------------------- :: Abs
GC |- \ x : ec1 . ec : Pi x : ec1 . ec2

GC |- ec : ec1
GC |- ec2 : s
ec1 =b ec2
-------------- :: Conv
GC |- ec : ec2

GC |- sst : ssq
------------------- :: UnitTerm
GC |- unitc : Unitc

GC |- sst : ssq
------------------ :: UnitType
GC |- Unitc : sst

</ GC |- eci : sst // i />
---------------------------------- :: ADTForm
GC |- < </ li : eci // i /> > : sst

GC |- ec : ecj
lj in </ li // i />
GC |- < </ li : eci // i /> > : sst
--------------------------------------------------------------------- :: ADTCon
GC |- < lj = ec> as < </ li : eci // i /> > : < </ li : eci // i /> >

ec0 def < </ li : eci // i /> >
GC |- ec1 : sst
GC |- ec : ec0
</ GC , xi : eci , pi : ec equal < li = xi > as ec0 |- eci : ec1 // i />
------------------------------------------------------------------------- :: ADTCase
GC |- case ec of </ li = xi proof pi -> eci // i />  : ec1

%TODO something funny with indices above, figure out what to do with ec0/ec1


% Helper rules

GC |- ec : s
x : ec in GC
------------ :: VarW
GC |- x : ec



defns Jcop :: '' ::=

defn ec1 ~~> ec2 :: :: evalcore :: CE_ {{ com evaluation }} by

ec1 ~~> ec1'
-------------------- :: AppL
ec1 ec2 ~~> ec1' ec2

ec2 ~~> ec2'
-------------------- :: AppR
vc1 ec2 ~~> vc1 ec2'


---------------------------------------- :: AppAbs
( \x : ec0. ec1 ) vc2 ~~> [x |-> vc2] ec1

ec ~~> ec'
-------------------------------------------------------------------------------- :: ADT
< lj = ec > as < </ li : eci // i /> > ~~> < lj = ec' > as < </ li : eci // i /> >

ec ~~> ec'
------------------------------------------------------------------------------------------------ :: CaseScrut
case ec of </ li = xi proof pi -> eci // i /> ~~> case ec' of </ li = xi proof pi -> eci // i />


ec0 def < </ li : eci // i /> >
--------------------------------------------------------------------------------------------------------------- :: CaseMatch
case < lj = vc > as ec0 of </ li = xi proof pi -> eci // i /> ~~> [xj |-> vc] [pj |-> eqrefl < lj = vc > as ec0] ecj
